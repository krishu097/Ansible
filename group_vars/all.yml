---
# Global Configuration
env_name: "{{ env_name | default('uat-edfx') }}"
env_name_safe: "{{ (env_name | default('uat-edfx')) | replace('-', '_') }}"
aws_region: "{{ aws_region | default('us-east-2') }}"

# VPC Configuration
vpc_cidr: "10.0.0.0/16"
create_nat_gateway: true
vpc_public_subnets:
  - { cidr: "10.0.1.0/24", az: "{{ aws_region }}a" }
  - { cidr: "10.0.2.0/24", az: "{{ aws_region }}b" }
vpc_private_subnets:
  - { cidr: "10.0.10.0/24", az: "{{ aws_region }}a" }
  - { cidr: "10.0.20.0/24", az: "{{ aws_region }}b" }

# EKS Configuration
eks_version: "1.32"
eks_cluster_name: "eks-{{ env_name }}"
endpoint_public_access: true
endpoint_private_access: true
public_access_cidrs:
  - "0.0.0.0/0"

cluster_logging:
  clusterLogging:
    - types: ["api", "audit", "authenticator", "controllerManager", "scheduler"]
      enabled: true

eks_cluster_tags:
  Environment: "{{ env_name }}"
  Name: "eks-{{ env_name }}"
  ManagedBy: "ansible"
  Project: "ansible-cicd"

# Node Group Configuration
nodegroup_name: "ng-{{ env_name }}"
nodegroup_instance_types: ["t3.medium"]
nodegroup_desired_size: 2
nodegroup_min_size: 1
nodegroup_max_size: 3
nodegroup_disk_size: 20
nodegroup_ami_type: "AL2_x86_64"
nodegroup_capacity_type: "ON_DEMAND"
nodegroup_labels: {}
nodegroup_taints: []

nodegroup_tags:
  Environment: "{{ env_name }}"
  Name: "ng-{{ env_name }}"
  ManagedBy: "ansible"
  Project: "ansible-cicd"

# Security Groups
eks_controlplane_sg_name: "eks-controlplane-sg-{{ env_name }}"
eks_workernodes_sg_name: "eks-workernodes-sg-{{ env_name }}"

control_plane_rules:
  - proto: tcp
    ports: [443]
    cidr_ip: "0.0.0.0/0"
    rule_desc: "HTTPS API access"

# IAM Configuration
eks_cluster_role_name: "eks-cluster-role-{{ env_name }}"
eks_nodegroup_role_name: "eks-nodegroup-role-{{ env_name }}"

eks_cluster_trust_policy:
  Version: "2012-10-17"
  Statement:
    - Effect: Allow
      Principal:
        Service: eks.amazonaws.com
      Action: sts:AssumeRole

eks_nodegroup_trust_policy:
  Version: "2012-10-17"
  Statement:
    - Effect: Allow
      Principal:
        Service: ec2.amazonaws.com
      Action: sts:AssumeRole

eks_cluster_managed_policies:
  - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"

eks_nodegroup_managed_policies:
  - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

# Timeouts
cluster_create_timeout: 1800
nodegroup_create_timeout: 3600
cluster_delete_timeout: 1200
nodegroup_delete_timeout: 1200

# Cleanup Configuration
require_confirmation: false # Set to true for interactive confirmation
