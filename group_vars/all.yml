---
# ========= Global =========
env_name: "uat-edfx" # override with: -e env_name=...
aws_region: "us-east-2" # override with: -e aws_region=...

# Helpful sanitized variant if you need to build names
env_name_safe: "{{ env_name | replace('-', '_') }}"

# ========= VPC =========
vpc_cidr: "10.0.0.0/16"
create_nat_gateway: true

# If you create VPC via Ansible, these guide creation;
# discovery later uses tags Environment={{ env_name }} and Tier=private
vpc_public_subnets:
  - { cidr: "10.0.1.0/24", az: "{{ aws_region }}a" }
  - { cidr: "10.0.2.0/24", az: "{{ aws_region }}b" }
vpc_private_subnets:
  - { cidr: "10.0.10.0/24", az: "{{ aws_region }}a" }
  - { cidr: "10.0.20.0/24", az: "{{ aws_region }}b" }

# Tags used by discovery
vpc_env_tag_key: "Environment"
vpc_managedby_tag_key: "ManagedBy"
vpc_managedby_tag_value: "ansible"
subnet_private_tag_key: "Tier"
subnet_private_tag_value: "private"

# ========= EKS =========
eks_version: "1.30" # keep in sync with eksctl template
eks_cluster_name: "eks-{{ env_name }}"

eks_cluster_tags:
  Environment: "{{ env_name }}"
  Name: "eks-{{ env_name }}"
  ManagedBy: "ansible"
  Project: "ansible-cicd"

# ========= Nodegroup =========
nodegroup_name: "ng-{{ env_name }}"
nodegroup_instance_types: ["t3.medium"] # eksctl template uses the first one
nodegroup_desired_size: 2
nodegroup_min_size: 1
nodegroup_max_size: 3
nodegroup_disk_size: 20
nodegroup_capacity_type: "ON_DEMAND" # ON_DEMAND or SPOT
nodegroup_labels: {}
nodegroup_taints: []

nodegroup_tags:
  Environment: "{{ env_name }}"
  Name: "ng-{{ env_name }}"
  ManagedBy: "ansible"
  Project: "ansible-cicd"

# ========= Security Groups (names; ids are discovered) =========
# Match the actual SG names you created earlier (no "-sg-" in the name)
eks_controlplane_sg_name: "eks-controlplane-{{ env_name }}"
eks_workernodes_sg_name: "eks-workernodes-{{ env_name }}"

# ========= IAM (names; ARNs are discovered) =========
eks_cluster_role_name: "eks-cluster-role-{{ env_name }}"
eks_nodegroup_role_name: "eks-nodegroup-role-{{ env_name }}"

eks_cluster_trust_policy:
  Version: "2012-10-17"
  Statement:
    - Effect: Allow
      Principal:
        Service: eks.amazonaws.com
      Action: sts:AssumeRole

eks_nodegroup_trust_policy:
  Version: "2012-10-17"
  Statement:
    - Effect: Allow
      Principal:
        Service: ec2.amazonaws.com
      Action: sts:AssumeRole

eks_cluster_managed_policies:
  - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"

eks_nodegroup_managed_policies:
  - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

# ========= Timeouts =========
cluster_create_timeout: 1800
nodegroup_create_timeout: 3600
cluster_delete_timeout: 1200
nodegroup_delete_timeout: 1200

# ========= Cleanup =========
require_confirmation: false
