---
# 1) Create/ensure EKS Cluster IAM Role
- name: Create EKS Cluster Role
  amazon.aws.iam_role:
    name: "{{ eks_cluster_role_name }}"
    description: "IAM Role for EKS Cluster - {{ env_name }}"
    assume_role_policy_document: "{{ eks_cluster_trust_policy | to_json }}"
    managed_policies: "{{ eks_cluster_managed_policies }}"
    tags:
      Environment: "{{ env_name }}"
      ManagedBy: "ansible"
  register: eks_cluster_role

# 2) Create/ensure EKS Node Group IAM Role
- name: Create EKS Node Group Role
  amazon.aws.iam_role:
    name: "{{ eks_nodegroup_role_name }}"
    description: "IAM Role for EKS Worker Nodes - {{ env_name }}"
    assume_role_policy_document: "{{ eks_nodegroup_trust_policy | to_json }}"
    managed_policies: "{{ eks_nodegroup_managed_policies }}"
    tags:
      Environment: "{{ env_name }}"
      ManagedBy: "ansible"
  register: eks_nodegroup_role

# 3) Create Instance Profile for Node Group
- name: Create Instance Profile for EKS Node Group
  amazon.aws.iam_instance_profile:
    name: "eks_nodegroup_instance_profile_{{ env_name_safe }}"
    role: "{{ eks_nodegroup_role_name }}"
    state: present
  register: eks_nodegroup_instance_profile

# 4) Export ARNs for downstream roles (eks)
- name: Set IAM role ARNs as facts
  set_fact:
    eks_cluster_role_arn: "{{ eks_cluster_role_info.iam_roles[0].arn }}"
    eks_nodegroup_role_arn: "{{ eks_nodegroup_role_info.iam_roles[0].arn }}"
    eks_nodegroup_instance_profile: "eks_nodegroup_instance_profile_{{ env_name_safe }}"
    cacheable: true

# 5) Debug
- name: Debug IAM role ARNs
  debug:
    msg:
      - "eks_cluster_role_name={{ eks_cluster_role_name }}"
      - "eks_cluster_role_arn={{ eks_cluster_role_arn }}"
      - "eks_nodegroup_role_name={{ eks_nodegroup_role_name }}"
      - "eks_nodegroup_role_arn={{ eks_nodegroup_role_arn }}"
      - "eks_nodegroup_instance_profile={{ eks_nodegroup_instance_profile }}"
