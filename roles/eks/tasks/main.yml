---
# Pre-flight: make sure upstream facts exist
- name: Assert inputs from VPC/SG/IAM roles
  assert:
    that:
      - private_subnet_ids is defined
      - private_subnet_ids | length > 0
      - eks_controlplane_sg_id is defined
      - eks_workernodes_sg_id is defined
      - eks_cluster_role_arn is defined
      - eks_nodegroup_role_arn is defined
    fail_msg: >
      Missing required inputs from upstream roles. Ensure 'vpc', 'sg', and 'iam'
      run before 'eks' in the same play.

###########################################
# Create / Update EKS Cluster
###########################################
- name: Create / Update EKS Cluster
  community.aws.eks_cluster:
    name: "{{ eks_cluster_name }}"
    region: "{{ aws_region }}"
    version: "{{ eks_version }}"
    role_arn: "{{ eks_cluster_role_arn }}"
    resources_vpc_config:
      subnetIds: "{{ private_subnet_ids }}"
      securityGroupIds:
        - "{{ eks_controlplane_sg_id }}"
      endpointPublicAccess: "{{ endpoint_public_access }}"
      endpointPrivateAccess: "{{ endpoint_private_access }}"
      publicAccessCidrs: "{{ public_access_cidrs }}"
    logging: "{{ cluster_logging }}"
    tags: "{{ eks_cluster_tags }}"
    wait_timeout: "{{ cluster_create_timeout }}"
    state: present
  register: eks_cluster

###########################################
# Create / Update Managed Node Group
###########################################
- name: Create / Update EKS Node Group
  community.aws.eks_nodegroup:
    region: "{{ aws_region }}"
    cluster_name: "{{ eks_cluster_name }}"
    name: "{{ nodegroup_name }}"
    node_role_arn: "{{ eks_nodegroup_role_arn }}"
    subnets: "{{ private_subnet_ids }}"
    scaling_config:
      min_size: "{{ nodegroup_min_size }}"
      max_size: "{{ nodegroup_max_size }}"
      desired_size: "{{ nodegroup_desired_size }}"
    disk_size: "{{ nodegroup_disk_size }}"
    instance_types: "{{ nodegroup_instance_types }}"
    ami_type: "{{ nodegroup_ami_type }}"
    capacity_type: "{{ nodegroup_capacity_type }}"
    labels: "{{ nodegroup_labels }}"
    taints: "{{ nodegroup_taints }}"
    tags: "{{ nodegroup_tags }}"
    wait: true
    wait_timeout: "{{ nodegroup_create_timeout }}"
    state: present
  register: eks_nodegroup

# Helpful output
- name: Debug EKS artifacts
  debug:
    msg:
      - "Cluster: {{ eks_cluster_name }} / Version: {{ eks_version }}"
      - "ControlPlane SG: {{ eks_controlplane_sg_id }}"
      - "Worker SG: {{ eks_workernodes_sg_id }}"
      - "Private subnets: {{ private_subnet_ids | join(', ') }}"
      - "Cluster role: {{ eks_cluster_role_arn }}"
      - "Nodegroup role: {{ eks_nodegroup_role_arn }}"
      - "Nodegroup: {{ nodegroup_name }} (desired={{ nodegroup_desired_size }})"
