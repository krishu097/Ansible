---
- name: Get EKS Cluster Role ARN
  amazon.aws.iam_role_info:
    name: "eks-cluster-role"
  register: cluster_role_info

- name: Get EKS Node Group Role ARN
  amazon.aws.iam_role_info:
    name: "eks-nodegroup-role"
  register: nodegroup_role_info

- name: Get EKS Control Plane Security Group
  amazon.aws.ec2_security_group_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "eks-controlplane-{{ env_name }}"
      "tag:Environment": "{{ env_name }}"
  register: eks_controlplane_sg_info

- name: Get EKS Worker Nodes Security Group
  amazon.aws.ec2_security_group_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "eks-workernodes-{{ env_name }}"
      "tag:Environment": "{{ env_name }}"
  register: eks_workernodes_sg_info

- name: Get VPC Subnets
  amazon.aws.ec2_vpc_subnet_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Environment": "{{ env_name }}"
  register: vpc_subnets_info

- name: Set EKS dependency facts
  set_fact:
    cluster_role_arn: "{{ cluster_role_info.iam_roles[0].arn }}"
    nodegroup_role_arn: "{{ nodegroup_role_info.iam_roles[0].arn }}"
    control_plane_sg_id: "{{ eks_controlplane_sg_info.security_groups[0].group_id }}"
    worker_nodes_sg_id: "{{ eks_workernodes_sg_info.security_groups[0].group_id }}"
    all_subnet_ids: "{{ (vpc_subnets_info.subnets | selectattr('tags.Type', 'equalto', 'public') | map(attribute='id') | list) + (vpc_subnets_info.subnets | selectattr('tags.Type', 'equalto', 'private') | map(attribute='id') | list) }}"
    private_subnet_ids: "{{ vpc_subnets_info.subnets | selectattr('tags.Type', 'equalto', 'private') | map(attribute='id') | list }}"

- name: Create EKS Cluster
  community.aws.eks_cluster:
    name: "{{ eks_cluster_name }}"
    version: "{{ eks_version }}"
    role_arn: "{{ cluster_role_arn }}"
    subnets: "{{ all_subnet_ids }}"
    security_groups:
      - "{{ control_plane_sg_id }}"
    endpoint_private_access: "{{ cluster_endpoint_private_access }}"
    endpoint_public_access: "{{ cluster_endpoint_public_access }}"
    public_access_cidrs: "{{ cluster_public_access_cidrs }}"
    logging:
      enable: "{{ cluster_logging_enabled }}"
      types: "{{ cluster_log_types }}"
    tags: "{{ eks_cluster_tags }}"
    wait: true
    wait_timeout: "{{ cluster_create_timeout }}"
  register: eks_cluster

- name: Create EKS Node Group
  community.aws.eks_nodegroup:
    cluster_name: "{{ eks_cluster_name }}"
    name: "{{ nodegroup_name }}"
    nodegroup_name: "{{ nodegroup_name }}"
    subnets: "{{ private_subnet_ids }}"
    node_role: "{{ nodegroup_role_arn }}"
    capacity_type: "{{ nodegroup_capacity_type }}"
    instance_types: "{{ nodegroup_instance_types }}"
    scaling_config:
      min_size: "{{ nodegroup_min_size }}"
      max_size: "{{ nodegroup_max_size }}"
      desired_size: "{{ nodegroup_desired_size }}"
    disk_size: "{{ nodegroup_disk_size }}"
    ami_type: "{{ nodegroup_ami_type }}"
    remote_access:
      ec2_ssh_key: "{{ ssh_key_name | default(omit) }}"
      source_security_groups:
        - "{{ worker_nodes_sg_id }}"
    update_config:
      max_unavailable: "{{ nodegroup_update_max_unavailable }}"
      max_unavailable_percentage: "{{ nodegroup_update_max_unavailable_percentage | default(omit) }}"
    tags: "{{ nodegroup_tags }}"
    wait: true
    wait_timeout: "{{ nodegroup_create_timeout }}"
  register: eks_nodegroup

- name: Show EKS cluster and nodegroup information
  debug:
    msg: |
      ðŸŽ‰ EKS Cluster Created Successfully!
      Cluster Name: {{ eks_cluster.cluster.name }}
      Cluster ARN: {{ eks_cluster.cluster.arn }}
      Cluster Endpoint: {{ eks_cluster.cluster.endpoint }}
      Cluster Status: {{ eks_cluster.cluster.status }}
      Kubernetes Version: {{ eks_cluster.cluster.version }}
      Control Plane Security Group: {{ control_plane_sg_id }}

      Node Group Name: {{ eks_nodegroup.nodegroup.nodegroup_name }}
      Node Group Status: {{ eks_nodegroup.nodegroup.status }}
      Node Group Instance Types: {{ eks_nodegroup.nodegroup.instance_types }}
      Node Group Scaling: Min={{ eks_nodegroup.nodegroup.scaling_config.min_size }}, Desired={{ eks_nodegroup.nodegroup.scaling_config.desired_size }}, Max={{ eks_nodegroup.nodegroup.scaling_config.max_size }}
      Worker Nodes Security Group: {{ worker_nodes_sg_id }}
